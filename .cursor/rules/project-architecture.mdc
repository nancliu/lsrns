---
description: 保持项目遵循统一的架构
alwaysApply: false
---
# OD生成脚本项目 - 项目架构规范

## 调用规则
- 当需要了解项目整体架构时使用
- 当需要设计新的模块或功能时使用
- 当需要重构现有代码结构时使用
- 当需要制定开发规范时使用

## 项目架构规范

### 1. 整体架构原则
- 采用分层架构：API层(接口) → Services层(业务逻辑) → Shared层(核心功能)
- 严格遵循模块化设计，每个模块职责单一
- 保持清晰的依赖关系：上层依赖下层，避免循环依赖
- 使用依赖注入和服务定位器模式管理服务实例

### 2. 目录结构规范
```
OD生成脚本/
├── api/                      # API接口层 - 只负责HTTP接口和路由
│   ├── main.py              # 唯一入口点，配置FastAPI应用
│   ├── routes/              # 路由定义，按业务模块分组
│   ├── services/            # 业务逻辑层，调用shared层功能
│   └── models/              # 数据模型和验证
├── shared/                   # 核心功能层 - 可复用的业务逻辑
│   ├── data_access/         # 数据访问层
│   ├── data_processors/     # 数据处理核心逻辑
│   ├── utilities/           # 通用工具函数
│   └── analysis_tools/      # 分析工具
├── templates/                # 配置模板和静态资源
├── cases/                    # 案例数据存储
└── frontend/                 # 前端界面
```

### 3. 模块设计原则
- **单一职责**: 每个类/模块只负责一个明确的功能
- **开闭原则**: 对扩展开放，对修改封闭
- **依赖倒置**: 高层模块不依赖低层模块，都依赖抽象
- **接口隔离**: 客户端不应该依赖它不需要的接口

## 编码规范

### 1. 命名规范
- **类名**: 使用PascalCase，如 `GantryDataProcessor`
- **函数名**: 使用snake_case，如 `process_gantry_data`
- **变量名**: 使用snake_case，如 `gantry_data`
- **常量名**: 使用UPPER_SNAKE_CASE，如 `MAX_RETRY_COUNT`
- **文件名**: 使用snake_case，如 `gantry_processor.py`

### 2. 代码结构规范
- 每个类必须有清晰的docstring，说明用途和职责
- 公共方法必须有详细的参数和返回值文档
- 私有方法使用下划线前缀，如 `_process_gantry_data`
- 异常处理必须使用try-catch，并记录详细日志

### 3. 数据处理规范
- 使用pandas进行数据处理，避免原生Python循环
- 数据验证必须在处理前进行
- 时间处理统一使用pandas的datetime功能
- 文件操作必须使用pathlib.Path，支持跨平台

### 4. 服务层规范
- 所有服务类继承自BaseService
- 服务方法必须返回明确的数据结构
- 错误处理返回空数据结构而不是抛出异常
- 使用logging记录关键操作和错误信息

### 5. API接口规范
- 使用Pydantic模型进行请求/响应验证
- 接口路径使用RESTful风格
- 错误响应使用统一的错误码和消息格式
- 支持CORS，允许前端跨域访问

## 开发工作流

### 1. 新功能开发
1. 在shared层实现核心逻辑
2. 在services层封装业务逻辑
3. 在routes层定义API接口
4. 在models层定义数据模型

### 2. 代码审查要点
- 检查模块职责是否单一
- 验证依赖关系是否正确
- 确认异常处理是否完善
- 检查日志记录是否充分

### 3. 测试要求
- 单元测试覆盖核心业务逻辑
- 集成测试验证模块间协作
- 端到端测试验证完整流程

## 性能优化原则

### 1. 数据处理优化
- 使用pandas的向量化操作
- 避免在循环中频繁创建DataFrame
- 合理使用内存，及时释放大对象

### 2. 模块导入优化
- 使用延迟导入减少启动时间
- 避免循环导入
- 合理组织import语句顺序

### 3. 文件操作优化
- 使用异步操作处理大文件
- 实现增量处理避免重复计算
- 合理使用缓存减少重复读取

## 安全规范

### 1. 输入验证
- 所有用户输入必须验证
- 文件上传必须检查类型和大小
- 路径参数必须防止目录遍历攻击

### 2. 数据安全
- 敏感配置使用环境变量
- 数据库连接使用连接池
- 日志中不记录敏感信息

## 维护性要求

### 1. 代码注释
- 复杂逻辑必须有详细注释
- 业务规则必须有说明
- 配置参数必须有解释

### 2. 日志记录
- 关键操作必须记录日志
- 错误日志必须包含上下文信息
- 使用结构化日志便于分析

### 3. 配置管理
- 配置参数集中管理
- 支持环境变量覆盖
- 提供配置验证功能

## 扩展性设计

### 1. 插件化架构
- 核心功能支持插件扩展
- 使用策略模式支持多种算法
- 配置驱动的功能开关

### 2. 多格式支持
- 支持多种数据格式输入
- 支持多种输出格式
- 使用适配器模式处理不同格式

### 3. 国际化支持
- 错误消息支持多语言
- 界面文本支持本地化
- 时间格式支持不同地区

## 部署规范

### 1. 环境配置
- 使用requirements.txt管理依赖
- 提供环境配置文件模板
- 支持Docker容器化部署

### 2. 启动脚本
- 提供Windows批处理启动脚本
- 支持环境变量配置
- 提供健康检查端点

### 3. 监控和日志
- 集成健康检查
- 提供性能监控指标
- 支持日志轮转和归档
description:
globs:
alwaysApply: false
---
